// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NetworkServiceManager
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import NetworkServiceManager
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 13.0, *)
public protocol HTTPClient {
  func request<T>(_ request: Foundation.URLRequest, decodingType: T.Type) -> Combine.AnyPublisher<T, NetworkServiceManager.HTTPError> where T : Swift.Decodable
  func request(_ request: Foundation.URLRequest) -> Combine.AnyPublisher<Swift.Void, NetworkServiceManager.HTTPError>
}
public struct NetworkManager : NetworkServiceManager.HTTPClient {
  public init()
  public func request<T>(_ request: Foundation.URLRequest, decodingType: T.Type) -> Combine.AnyPublisher<T, NetworkServiceManager.HTTPError> where T : Swift.Decodable
  public func request(_ request: Foundation.URLRequest) -> Combine.AnyPublisher<Swift.Void, NetworkServiceManager.HTTPError>
}
public enum HTTPError : Swift.Error {
  case statusCode(Foundation.HTTPURLResponse)
  case requestFailed(any Swift.Error)
  case invalidResponse
}
public enum RequestMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RequestBuilder {
  public static func getRequest(url: Foundation.URL) throws -> Foundation.URLRequest
  public static func anyRequest<T>(url: Foundation.URL, anyObject: T, requestMethod: NetworkServiceManager.RequestMethod) throws -> Foundation.URLRequest where T : Swift.Encodable
  public static func deleteRequest(url: Foundation.URL) -> Foundation.URLRequest
  @objc deinit
}
extension NetworkServiceManager.RequestMethod : Swift.Equatable {}
extension NetworkServiceManager.RequestMethod : Swift.Hashable {}
extension NetworkServiceManager.RequestMethod : Swift.RawRepresentable {}
